# bot/bot_main.py

import os
from dotenv import load_dotenv

load_dotenv()
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_URL = os.getenv("API_URL", "http://127.0.0.1:8000")  # fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

import django
django.setup()

import requests
import re

from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler

from openai import OpenAI
from asgiref.sync import sync_to_async

from bot.messages import message_start
from bot.models import Client, Stage, Assistant, ActiveContext
from bot.gpt_utils import (
    generate_prompt,
    call_gpt,
    generate_assistant_prompt,
    call_gpt_plain,
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è emoji –∏–∑ —Ç–µ–∫—Å—Ç–∞
def remove_emojis(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ emoji –∏–∑ —Å—Ç—Ä–æ–∫–∏.
    """
    emoji_pattern = re.compile("["
        u"\U0001F600-\U0001F64F"
        u"\U0001F300-\U0001F5FF"
        u"\U0001F680-\U0001F6FF"
        u"\U0001F1E0-\U0001F1FF"
        u"\U00002700-\U000027BF"
        u"\U0001F900-\U0001F9FF"
        u"\U0001FA70-\U0001FAFF"
        u"\U00002600-\U000026FF"
        "]+", flags=re.UNICODE)
    return emoji_pattern.sub(r'', text).strip()


@sync_to_async
def is_allowed_assistant(telegram_id: int) -> bool:
    return Assistant.objects.filter(telegram_id=str(telegram_id)).exists()


openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:
    ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∏–ª–∏ reply,
    ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.
    """

    message = update.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Telegram ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    assistant_id = update.effective_user.id
    if not await is_allowed_assistant(assistant_id):
        await update.message.reply_text(
            "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.\n"
            "–ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–∞—à Telegram ID.\n\n"
            "üìå –ö–∞–∫ –µ–≥–æ —É–∑–Ω–∞—Ç—å:\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ @userinfobot\n"
            "2. –ù–∞–∂–º–∏—Ç–µ Start ‚Äî –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à ID"
        )
        return

    if not message or not message.text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –í–∞—Ä–∏–∞–Ω—Ç 0.5: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message and message.reply_to_message.forward_from:
        client = message.reply_to_message.forward_from
        client_id = client.id
        client_name = client.full_name

        client_obj, _ = await sync_to_async(Client.objects.get_or_create)(
            telegram_id=client_id,
            defaults={"name": client_name}
        )
        await sync_to_async(ActiveContext.objects.update_or_create)(
            assistant_telegram_id=str(assistant_id),
            defaults={"client": client_obj}
        )

        await message.reply_text(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {client_name}")

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if message.forward_date:
        forwarded_text = message.text
        client = message.forward_from
        if not client:
            await message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                    "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä—ã–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–æ–∫.\n\n"
                    "–ü–æ–ø—Ä–æ—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram:\n"
                    "Settings ‚Üí Privacy ‚Üí Forwarded Messages ‚Üí Everybody"
            )
            return

        client_id = client.id
        client_name = client.full_name

        payload = {
            "telegram_id": client_id,
            "name": client_name,
            "text": forwarded_text
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        client_obj, _ = await sync_to_async(Client.objects.get_or_create)(
            telegram_id=client_id,
            defaults={"name": client_name}
        )
        await sync_to_async(ActiveContext.objects.update_or_create)(
            assistant_telegram_id=str(assistant_id),
            defaults={"client": client_obj}
        )

        try:
            response = requests.post(f"{API_URL}/api/interaction/", json=payload)
            response.raise_for_status()
            data = response.json()

            print("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data)

            await message.reply_text(data.get("reply", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."))
            await message.reply_text(data.get("assistant_hint", "–ù–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."))

        except requests.exceptions.RequestException as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É:", e)
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É.")
        return

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
    active_context = await sync_to_async(
        lambda: ActiveContext.objects.filter(assistant_telegram_id=str(assistant_id)).first()
    )()

    if active_context:
        client = await sync_to_async(lambda: active_context.client)()
        stage_obj = await sync_to_async(Stage.objects.filter(client=client).first)()
        if stage_obj:
            stage_map = {
                "S": "S ‚Äî Situation (—Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã)",
                "P": "P ‚Äî Problem (–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã)",
                "I": "I ‚Äî Implication (—É—Å—É–≥—É–±–ª—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã)",
                "N": "N ‚Äî Need-payoff (—Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã)"
            }
            stage_label = stage_map.get(stage_obj.stage, "S ‚Äî Situation")
            spin_line = f"üìå –¢–µ–∫—É—â–∏–π SPIN-—ç—Ç–∞–ø –∫–ª–∏–µ–Ω—Ç–∞: {stage_label}\n\n"
        else:
            spin_line = "üìå –¢–µ–∫—É—â–∏–π SPIN-—ç—Ç–∞–ø –∫–ª–∏–µ–Ω—Ç–∞: S ‚Äî Situation (—Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã)\n\n"

        assistant_question = message.text.strip()
        prompt = await generate_assistant_prompt(client, assistant_question)
        reply = await sync_to_async(call_gpt_plain)(prompt)
        await message.reply_text(spin_line + reply)
        return

    # üÜï –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç –µ—â—ë –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω
    await message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
    )


async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(message_start)


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("start", handle_start))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    
    app.run_polling()


if __name__ == "__main__":
    main()